#   -----------------------------
#   NAVIGATION / MOVEMENT
#   -----------------------------

alias l='ls'
alias cda='cd ~/aspera_tools'
alias cdm='cd ~/automatica'
alias cdd='cd ~/dotfiles'
alias cdl='cd ~/dotfiles-local'
alias cdb='cd ~/aspera_tools/docs-build'
alias docs='cd ~/aspera_tools/docs-dita'
alias tx='tmuxinator'
jira(){
  open "https://jira.aspera.us/browse/$1"
}

#   -----------------------------
#   EDIT FILES
#   -----------------------------

alias vzs="vim ~/dotfiles-local/zshrc.local"
alias al='vim ~/dotfiles-local/aliases.local'
alias vgc='vim ~/dotfiles-local/gitconfig.local'
alias vrc='vim ~/dotfiles-local/vimrc.local'
alias vplug='vim ~/dotfiles-local/vimrc.bundles.local'
alias vtodo="vim ~/Dropbox/todo/todo.txt"
alias notes='cd ~/Dropbox/notes'
alias t="todo.sh"

#   -----------------------------
#   SOURCING FILES
#   -----------------------------

alias so='source ~/.zshrc; echo "Sourced .zshrc"'
alias soa='source ~/dotfiles-local/aliases.local; echo "Sourced aliases"'

#   -----------------------------
#   TESTING
#   -----------------------------

alias rs='rspec'
alias rs-o='rspec --only-fail --format doc'
alias dcr='docker-compose run --rm runner'
alias dcb='docker-compose build'
alias dcur='docker-compose up rails'
alias pdcur='RAILS_ENV=production docker-compose up rails'
alias dc="docker-compose"
alias dcp="docker exec -it automatica_postgres_1 psql automatica_dev -U postgres"

#   -----------------------------
#   INTERNAL TOOLS
#   -----------------------------

tools_path="~/internal_tools/scripts"

alias lbuild="ruby $tools_path/run_test_build.rb"
alias update="ruby $tools_path/update_repos.rb"
alias checkout="ruby $tools_path/checkout_repos.rb"
alias external="ruby $tools_path/configure_externals.rb"

#   -----------------------------
#   BUILD SCRIPTS
#   -----------------------------

alias jbuild="ruby $tools_path/run_builds.rb"
alias pbuild="g ps; jbuild"
alias jconf="ruby $tools_path/configure_jenkins_build.rb"
alias p2prod="ruby $tools_path/push_to_prod.rb"


alias gpb="git push; jbuild"
alias gpbr="git push; jbuild -r"
gcg(){
  if [ $# != 2 ]; then
    echo "Requires two arguments: group and repo_name"
  else;
    git clone "git@gitlab.aspera.us:$1/$2.git"
  fi
}

#   -----------------------------
#   TESTING DC UE
#   -----------------------------
# dbuild(){
#   if [[ $2 == "+token" ]]; then
#     echo "docker build with UE_TOKEN"
#     bundle
#     docker build --build-arg UE_TOKEN='Cbpx87BSrnxnbNaqbHZq' -t $1 .
#   else
#     bundle
#     docker build -t $1 .
#   fi
# }
alias ue-dm="docker run --rm --name dm -v docs-dita:/root/docs-dita -p 9494:9494 --link redis:redis ue-docs-manager"
alias ue-dm-sk="docker exec -it dm bin/sidekiq -r /app/docs_manager_server.rb"
alias ue-redis="docker run --rm -p 6379:6379 --name redis redis:alpine3.10 -d"
alias d-ue-b="docker run --rm -it --name ubs -p 9393:9393 -v ue-dita-ot:/root/ue-dita-ot --network=ue-test ue-build-server"
alias dcudev="docker-compose -f dev-docker-compose.yml up"
alias dr="docker run --rm -it"
alias ue-dm="docker run --rm -it --link redis:redis -p 9494:9494 ue-docs-manager"
alias ue-bs="docker run --rm -it --link redis:redis -p 9393:9393 ue-build-server"
alias dbuild="docker build -t"
build_pipe(){
  "docker build --build-arg VAULT_ADDR=https://vault.aspera.us --build-arg VAULT_TOKEN=$(vault token lookup -address https://vault.aspera.us -format json | jq -r '.data.id') -t ue-pipeline-builder ."
}

build_kc(){
  version=$(git rev-parse --abbrev-ref HEAD)
  ue-build pipeline kc_build $version linux $1
}

alias python="python3"
alias pip="pip3"
g_pipe(){
  open http://gitlab.aspera.us/techpubs/$1/pipelines
}
