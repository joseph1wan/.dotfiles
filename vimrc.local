" Settings
set ignorecase
set scrolloff=5
set relativenumber

" Key mappings
ino jj <esc>
cno jj <c-c>
vno v <esc>
nmap <Leader>- :split<Cr>
nmap <Leader>\ :vsplit<Cr>

" Simple editing
nmap <Leader>o mao<Esc>'a
nmap <Leader>O maO<Esc>'a
nmap <Leader>D mq$x`q
nmap <Leader>ll mkgg=G'k
noremap <Leader>i mki <Esc>
nmap <Leader>F ^
nmap <Leader>E $
nmap <Leader>S pkdd

" File manipulation
nmap <Leader>w :wa<Cr>
nmap <Leader>q :q<Cr>
nmap <Leader>so :so $MYVIMRC<Esc>
nmap <Leader>eso :vsplit ~/dotfiles-local/vimrc.local<Esc>

" Alternate files and rspec files
nmap <Leader>r :R<Cr>
nmap <Leader>rf :Rfactory<Cr>
nmap <Leader>R :vsplit<Cr>:R<Cr>

nmap <Leader>n :NERDTreeToggle<Cr>

" Braces and parens
nmap <Leader>) ysiW)X2w
nmap <Leader># ysiW}i#<Esc>
nmap <Leader>: i:<Esc>ysiW]i

" Replace word with paste
nmap <Leader>vwp viwp

" Copy and paste with keyboard
vnoremap <Leader>c :%w !pbcopy<cr><cr>
noremap <Leader>v :r !pbpaste<cr>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

let g:rspec_command = "VtrSendCommandToRunner! xvfb-run -a rspec {spec} --format doc"

" RSpec.vim mappings
map <Leader>t ::wa<CR>:call RunCurrentSpecFile()<CR>
map <Leader>s :wa<CR>:call RunNearestSpec()<CR>
map <Leader>l :wa<CR>:call RunLastSpec()<CR>
map <Leader>a :wa<CR>:call RunAllSpecs()<CR>

function! RunFeatures()
  :VtrSendCommandToRunner xvfb-run -a rspec spec/features --format doc
endfunction

function! RunClasses()
  :VtrSendCommandToRunner xvfb-run -a rspec spec/classes --format doc
endfunction

command! Rfeat call RunFeatures()
command! Rclass call RunClasses()

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" VTR commands
nnoremap <leader>v- :VtrOpenRunner { "orientation": "v" }<cr>
noremap <leader>v\ :VtrOpenRunner { "orientation": "h" }<cr>
nnoremap <leader>vk :VtrKillRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <Leader>sl :VtrSendLinesToRunner<cr>
vno  <Leader>sl :VtrSendLinesToRunner<cr>
nnoremap <leader>vs :VtrSendCommandToRunner<space>

" Run a given vim command on the results of alt from a given path.
" See usage below.
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

" Find the alternate file for the current path and open it
nnoremap <leader>. :w<cr>:call AltCommand(expand('%'),':e')<cr>

set undofile
set undodir=~/.vim/undodir

let g:ruby_indent_access_modifier_style="indent"
