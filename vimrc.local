" Settings
set ignorecase
set scrolloff=5

" Key mappings
ino jj <esc>
cno jj <c-c>
vno v <esc>

" Leader mappings
nmap <Leader>o mao<Esc>'a
nmap <Leader>O maO<Esc>'a
nmap <Leader>w :w<Cr>
nmap <Leader>so :so $MYVIMRC<Esc>
nmap <Leader>eso :vsplit ~/dotfiles-local/vimrc.local<Esc>
nmap <Leader>vtip :split ~/notes/cheatsheets/vim-cheatsheet<Esc>
nmap <Leader>ttip :split ~/notes/cheatsheets/tmux-cheatsheet<Esc>
nmap <Leader>gtip :split ~/notes/cheatsheets/git-cheatsheet<Esc>
nmap <Leader>r :R<Cr>
nmap <Leader>R :vsplit<Cr>:R<Cr>
nmap <Leader>n :NERDTreeToggle<Cr>
nmap <Leader>E 20<C-E>
nmap <Leader>de $x
nmap <Leader>,, mkgg=G'k

vnoremap <Leader>y :%w !pbcopy<cr><cr>
noremap <Leader>p :r !pbpaste<cr>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" " zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>s :wincmd =<cr>

let g:rspec_command = "VtrSendCommandToRunner! rspec {spec}"

" RSpec.vim mappings
map <Leader>t ::wa<CR>:call RunCurrentSpecFile()<CR>
map <Leader>s :wa<CR>:call RunNearestSpec()<CR>
map <Leader>l :wa<CR>:call RunLastSpec()<CR>
map <Leader>a :wa<CR>:call RunAllSpecs()<CR>

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

nnoremap <leader>v- :VtrOpenRunner { "orientation": "v" }<cr>
noremap <leader>v\ :VtrOpenRunner { "orientation": "h" }<cr>
nnoremap <leader>vk :VtrKillRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>

nnoremap <Leader>sl :VtrSendLinesToRunner<cr>
vno  <Leader>sl :VtrSendLinesToRunner<cr>
nnoremap <leader>vs :VtrSendCommandToRunner<space>

" Run a given vim command on the results of alt from a given path.
" See usage below.
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

" Find the alternate file for the current path and open it
nnoremap <leader>. :w<cr>:call AltCommand(expand('%'),':e')<cr>

set undofile
set undodir=~/.vim/undodir
